//main.cpp

#include "naive.h"

int main() {
    string txt, pat;
    cin >> txt >> pat; // Input text and pattern

    vector<int> res = naiveSearch(txt, pat);
    for (int idx : res) cout << idx << " ";
    cout << endl;
    return 0;
}

//naÃ¯ve.h

#ifndef NAIVE_H
#define NAIVE_H

#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Naive pattern searching function
vector<int> naiveSearch(string &txt, string &pat);

#endif


//naive.cpp

#include "naive.h"

// Naive search: checks for match of pattern at every position of text
vector<int> naiveSearch(string &txt, string &pat) {
    vector<int> res;
    int n = txt.size(), m = pat.size();
    for (int i = 0; i <= n - m; i++) {
        int j = 0;
        while (j < m && txt[i + j] == pat[j]) j++;
        if (j == m) res.push_back(i); // match found at i
    }
    return res;
}
